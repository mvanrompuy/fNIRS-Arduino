clear all;

% Get Physionet data for one of the subjects
[data,FS] = processPhysionetData(1);

% Detrend data
data(:,2:4) = detrend(data(:,2:4));

% Standardize data
data(:,2:4) = zscore(data(:,2:4));

% 1-D wavelet decomposition to different subbands of EEG
levels = 4;

% Set extension mode to periodization (smallest length)
dwtmode('per')
ST = dwtmode('status'); % Mode used for reducing border effects

for c = 2:4 % 3 channels to subband decode  
    [C(:,c-1),L(:,c-1)] = wavedec(data(:,c),levels,'coif5'); %or db4
    index = 1;
    
    % Show decomposition of signal
    % signal = d1 + d2 + d3 + ... + dn + an

    iterations = levels+1;
    for p = 1:(iterations)
        if(p == iterations) % Type = 'a' (approximation)
            N = levels;
            type = 'a';
            fRangeStr = sprintf('cA%u | Frequency range: %u - %g Hz',N,0,(FS/2)/(2^(p-1)));
        else % Type = 'd' (detail)
            N = p;
            type = 'd';
            fRangeStr = sprintf('cD%u | Frequency range: %g - %g Hz',N,(FS/2)/(2^p),(FS/2)/(2^(p-1)));
        end;
        subplot(iterations,1,iterations-p+1);
        X = wrcoef(type,C,L,'coif5',N);
        plot(X);
        title(fRangeStr);
    end
end

windowSize = 32; % Window size for original sampling speed (e.g. half sampling speed -> windowSize/2). Must contain at least 1 coefficient at lowest decomposition level!

            % Non-overlapping sliding window

% CREATE TARGETS FOR CLASSIFICATION
        % Create matrix containing the target vectors
                % 0: 0 0
                % 1: 1 0        -> e.g. if classifier outputs  0.9955 0.0013 -> target = 1
                % 2: 0 1        
data(:,5) = data(:,5)+1; % No task = 0 allowed (see documentation ind2vec)
targetVector = full(ind2vec([1 2]));

intTargets = downsample(data(:,5),windowSize); % Keep ever n'th sample

for i = 1:size(intTargets,1)
    intValue = intTargets(i,1);
    targets(i,:) = targetVector(intValue,:); % Replace integer by corresponding vector
end

% CALCULATE FEATURES FOR CLASSIFICATION
        % Select appropriate frequency subbands to use for classification
        % Motor activity is mostly seen in µ (8-12 Hz) and beta band (18-25 Hz)
        % => cD2, cD3 and cD4 from each channel (3 subbands x 3 channels)
                % for c = 1:3
                %     cD2(:,c) = detcoef(C(:,c),L(:,c),2); % Extract detail (D) coefficients
                %     cD3(:,c) = detcoef(C(:,c),L(:,c),3);
                %     cD4(:,c) = detcoef(C(:,c),L(:,c),4);
                % end
                % numberCoef = [0,size(cD2,1),size(cD3,1),size(cD4,1)]; % level 1, 2, 3, 4

column = 1; % Feature column
features = zeros(ceil(size(data,1)/windowSize),9);

for level = 2:4
    ws = windowSize/(2^level) % Change window size according to level of decomposition to get equal length of feature vector
    tempCoef = []; % Clear array

    % Extract detail (D) coefficients
    for c = 1:3
        tempCoef(:,c) = detcoef(C(:,c),L(:,c),level);
    end
    
    % Calculate Mean absolute value (MAV) on wavelet coefficients as classifier feature
    for c = 1:3
        n = 1;
        m = 1;
        while n < size(tempCoef,1)
            if(n < size(tempCoef,1)-ws)
                features(m,column) = meanabs(tempCoef(n:n+ws-1));
            else
                features(m,column) = meanabs(tempCoef(n:end));
            end
            n = n + ws;
            m = m + 1;
        end
        column = column + 1;
    end
end                

% Standardize data for increased accuracy in classification

% for i = 1:9
%     features(:,i) = zscore(features(:,i));
% end

% PRINCIPAL COMPONENT ANALYSIS before classification? -> Compression of
% classifiers

    % REPLACE WAVEDEC BY MWDTDEC?

    % Neural network can be extended to multiple output classes
    % SVM only supports 2 outputs classes

                % EEGMotor = load('-mat', 'Subject1_1D');

                % % Create new variables in the base workspace from those fields.
                % vars = fieldnames(EEGMotor);
                % for i = 1:length(vars)
                %     assignin('base', vars{i}, EEGMotor.(vars{i}));
                % end

                % EEGData.left = resample(EEGMotor.left(1:19,:)',64,125); % Resample by 64/125 (500 Hz to 256 Hz for Wavelet transform)

                % % % MATLAB Code
                % % % Generated by MATLAB(R) 8.3 and the Signal Processing Toolbox 6.21.
                % % % Generated on: 02-Apr-2014 19:42:14
                % % 
                % % % Butterworth Bandpass filter designed using FDESIGN.BANDPASS.
                % % 
                % % % All frequency values are in Hz.
                % % Fs = 500;  % Sampling Frequency
                % % 
                % % Fstop1 = 0.01;       % First Stopband Frequency
                % % Fpass1 = 0.5;        % First Passband Frequency
                % % Fpass2 = 35;         % Second Passband Frequency
                % % Fstop2 = 40;         % Second Stopband Frequency
                % % Astop1 = 60;          % First Stopband Attenuation (dB)
                % % Apass  = 1;           % Passband Ripple (dB)
                % % Astop2 = 80;          % Second Stopband Attenuation (dB)
                % % match  = 'stopband';  % Band to match exactly
                % % 
                % % % Construct an FDESIGN object and call its BUTTER method.
                % % h  = fdesign.bandpass(Fstop1, Fpass1, Fpass2, Fstop2, Astop1, Apass, ...
                % %                       Astop2, Fs);
                % %                   
                % % Hd = design(h, 'butter', ...
                % %         'MatchExactly', 'stopband', ...
                % %         'SystemObject', true);
                % % % figure(1);
                % % % fvtool(Hd);
                % %     
                % % Hd = dsp.BiquadFilter( ...
                % %         'Structure', 'Direct form II', ...
                % %         'SOSMatrix',Hd.SOSMatrix,'ScaleValues',Hd.ScaleValues)
                % %     
                % % % figure(2);
                % % % fvtool(Hd);
                % 
                % figure(3);
                % hold on;
                % plot([0:1/Fs:(length(EEGMotor.left(1,:))-1)/Fs],EEGMotor.left(1,:),'Color',[1 0 0]);
                % y = step(Hd,EEGMotor.left(1,:)');
                % plot([0:1/Fs:(length(EEGMotor.left(1,:))-1)/Fs],y,'Color',[0 1 0]);


